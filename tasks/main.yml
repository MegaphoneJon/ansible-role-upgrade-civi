---
- name: Get the latest CiviCRM version number
  local_action:
    module: uri
    url: http://latest.civicrm.org/stable.php
    return_content: yes
  run_once: true
  register: civi_ver

# https://download.civicrm.org/latest has stable version names, but I want to know whether I already have the same version already, so I do this version-specific approach.
- name: Download stable versions of Civi
  local_action:
    module: get_url
    url: "https://download.civicrm.org/{{ item }}"
    dest: "/tmp/{{ item }}"
  run_once: true
  with_items:
    - "civicrm-{{ civi_ver.content }}-drupal.tar.gz"
    - "civicrm-{{ civi_ver.content }}-backdrop.tar.gz"
    - "civicrm-{{ civi_ver.content }}-wordpress.zip"

- block:
  - name: check installed CiviCRM version
    command: mysql {{ crm_db_name }} -N -s -e'SELECT version from civicrm_domain WHERE id = 1'
    become: yes
    when: contract_type is search("Civi Maintenance") and freeze_crm != "1"
    register: installed_version
    changed_when: false

  - name: Find old database backups
    find:
      age: 1d
      path: "{{ webroot }}/../sql-dumps"
      patterns: "{{ crm_db_name }}.pre-*.sql.gz"
      age_stamp: ctime
    when: contract_type is search("Civi Maintenance") and freeze_crm != "1"
    register: old_db_backups

  - name: Delete old database backups
    file:
      path: "{{ item.path }}"
      state: absent
    with_items: "{{ old_db_backups.files }}"
    when: old_db_backups.files is defined and old_db_backups.matched > 0

  - name: Check if db already exists
    stat:
      path: "{{ webroot }}/../sql-dumps/{{ crm_db_name }}.pre-{{civi_ver.content}}.sql.gz"
    become: yes
    register: existing_backup
    when: contract_type is search("Civi Maintenance") and freeze_crm != "1"

  - name: Back up the databases
    mysql_db:
      state: dump
      name: "{{ crm_db_name }}"
      target: "{{ webroot }}/../sql-dumps/{{ crm_db_name }}.pre-{{civi_ver.content}}.sql.gz"
    become: yes
    when: existing_backup.stat is defined and existing_backup.stat.exists == false

  - name: Unarchive the files into civiroot (.tar.gz)
    unarchive:
      src: "/tmp/civicrm-{{ civi_ver.content }}-{{ cms|lower }}.tar.gz"
      dest: "{{ civiroot }}/.."
      creates: "{{ civiroot }}/release-notes/{{ civi_ver.content }}.md"
    become: yes
    become_user: "{{ run_as_user }}"
    when: cms != 'WordPress' and contract_type is search("Civi Maintenance") and freeze_crm != "1"

  - name: Unarchive the files into civiroot (.zip)
    unarchive:
      src: "/tmp/civicrm-{{ civi_ver.content }}-{{ cms|lower }}.zip"
      dest: "{{ civiroot }}/../.."
      creates: "{{ civiroot }}/release-notes/{{ civi_ver.content }}.md"
    become: yes
    become_user: "{{ run_as_user }}"
    when: cms == 'WordPress' and contract_type is search("Civi Maintenance") and freeze_crm != "1"

  # This is broken on WP if you just upgraded the db. Checking in with Christian Wach on 8/29/18.
  - name: Upgrade the Civi DB
    command: "cv -n upgrade:db --cwd {{ webroot }}"
    become: yes
    become_user: "{{ run_as_user }}"
    when: contract_type is search("Civi Maintenance") and freeze_crm != "1" and installed_version.stdout != civi_ver.content

  - name: git config - user/email
    blockinfile:
      path: "{{ webroot }}/.git/config"
      block: |
        [user]
          email = none@megaphonetech.com
          name = {{ run_as_user }} on {{ inventory_hostname }}
    become: yes
    become_user: "{{ run_as_user }}"
    when: contract_type is search("Civi Maintenance") and freeze_crm != "1"

  - name: Patch core#587, PR#14339.  Current status is OPEN (might be in 5.16)
    patch:
      src: "{{role_path}}/files/14339.diff"
      basedir: "{{ civiroot }}"
      strip: 1
    become: yes
    when: contract_type is search("Civi Maintenance")

  - name: Patch reporting#18, PR#14982.  Current status is OPEN
    patch:
      src: "{{role_path}}/files/14982.diff"
      basedir: "{{ civiroot }}"
      strip: 1
    become: yes
    when: contract_type is search("Civi Maintenance")

  - name: Patch membership#14, PR#15206.  Detect lifetime memberships correctly.
    patch:
      src: "{{role_path}}/files/15206.diff"
      basedir: "{{ civiroot }}"
      strip: 1
    become: yes
    when: contract_type is search("Civi Maintenance")

  - name: Patch core#1006, PR#14390.  Current status is OPEN
    patch:
      src: "{{role_path}}/files/14390.diff"
      basedir: "{{ civiroot }}"
      strip: 1
    become: yes

  - name: Patch PHPWord to allow spaces in filenames
    patch:
      src: "{{role_path}}/files/1674.diff"
      basedir: "{{ civiroot }}/vendor/phpoffice/phpword"
      strip: 1
    become: yes
    when: contract_type is search("Civi Maintenance")

  - name: git add Civi + patches
    command: git add -v -A
    args:
      chdir: "{{ civiroot }}"
    register: add_result
    become: yes
    become_user: "{{ run_as_user }}"
    changed_when: add_result.stdout != ''
    failed_when: add_result.stderr != ''
    when: contract_type is search("Civi Maintenance") and freeze_crm != "1"


  - name: git commit Civi + patches
    command: "git commit -m 'CiviCRM {{ civi_ver.content }} with my patches on top'"
    args:
      chdir: "{{ civiroot }}"
    register: commit_result
    become: yes
    become_user: "{{ run_as_user }}"
    changed_when: commit_result.rc == 0
    failed_when: not(commit_result.rc == 0 or 'nothing to commit, working tree clean' in commit_result.stdout_lines)
    when: contract_type is search("Civi Maintenance") and freeze_crm != "1"

  - name: git push
    command: git push --set-upstream origin master
    args:
      chdir: "{{ webroot }}"
    register: push_result
    become: yes
    become_user: "{{ run_as_user }}"
    when: internal_repo == "1" and (git_repo_push_url is search("ssh://")) and contract_type is search("Civi Maintenance") and freeze_crm != "1"
    changed_when: push_result.rc == 0 and push_result.stderr != 'Everything up-to-date'
    failed_when: not(push_result.rc == 0)

  when: contract_type is search("Civi Maintenance") and freeze_crm != "1"
#- name: Get a list of plugins that need updating
#  script: helpers/upgradeable-civi.php
#  args:
#    chdir: "{{ item.value.webroot }}"
#  register: extensions
#  changed_when: false
#  become: yes
#  become_user: "{{ item.value.run_as_user }}"
#  with_dict: "{{ sites }}"
##  when: item.value.contract_type | search("Civi Maintenance")
#  when: item.key == 'nwu.local'
#  loop_control:
#    label: "{{ item.key }}"

#- debug: var=item
#  with_items: "{{ extensions.results }}"
#  when: item.stdout is defined and item.stdout != "null"

#- name: Upgrade Civi extensions
#  include_tasks: civi-extensions.yml
#  with_nested: 
#    - "{{ extensions.results }}"
#    - "{{ extensions.results.stdout_lines }}"
#  become_user: "{{ item[0].item.value.run_as_user }}"
#  when: item[0].item.stdout_lines is defined and item[0].item.stdout_lines != "null"
#  loop_control:
#    label: "{{ item[0].item.key }}"


# TODO: To properly loop over extensions and commit each separately, we'll need to use an include.
#       Unfortunately, there's no looping over a block.  site-deploy role uses includes similarly.
#- debug: 
#    msg: "{{ item.name }} {{ item.version }}"
#  with_items: "{{ extensions.results | map(attribute='stdout') | map('from_json') | list }}"

#- name: Upgrade extensions
#  debug: 
#    msg: "cv ext:download -f {{ item.id }}"
#  with_items: "{{ extensions.results | map(attribute='stdout') | map('from_json') | list }}"

#- handler: Run extension db updates
# cv ext:upgrade-db

#- name: Add upgraded extension to git
#  command:
# git add .

#- name: Commit upgraded extention to git
#  command:
# git commit -m"Updated CiviCRm extension {{ item.name }} to {{ item.version }}

#- name: Push to repo
#  command:
# git push origin master

