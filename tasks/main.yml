---
- name: Ensure file owner/perms are correct
  file:
    path: "{{ webroot }}"
    state: directory
    mode: ug+rw
    owner: "{{ run_as_user }}"
    group: "{{ run_as_user }}"
    recurse: yes
  become: yes

- name: git pull
  git:
    repo: "{{ git_repo_url }}"
    dest: "{{ gitroot }}"
    version: "{{ git_main_branch }}"
    track_submodules: no
  become: yes
  become_user: "{{ run_as_user }}"
  when: git_repo_url is not none
  tags: upgrade-extensions

- name: Get current git commit hash
  command: git rev-parse HEAD
  args:
    chdir: "{{ webroot }}"
  register: latest_commit
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: FALSE
  tags: upgrade-extensions

- name: Get the latest CiviCRM version number
  local_action:
    module: uri
    url: http://latest.civicrm.org/stable.php
    return_content: yes
  run_once: true
  register: civi_ver
  become: no

#- name: Fake an older version of CiviCRM
#  set_fact:
#    civi_ver:
#      content: "5.56.2"

# https://download.civicrm.org/latest has stable version names, but I want to know whether I already have the same version already, so I do this version-specific approach.
- name: Download stable versions of Civi
  local_action:
    module: get_url
    url: "https://download.civicrm.org/{{ item }}"
    dest: "/tmp/{{ item }}"
  run_once: true
  with_items:
    - "civicrm-{{ civi_ver.content }}-drupal.tar.gz"
    - "civicrm-{{ civi_ver.content }}-backdrop.tar.gz"
    - "civicrm-{{ civi_ver.content }}-wordpress.zip"
  become: no

- name: check installed CiviCRM version
  xml:
    path: "{{ civiroot }}/xml/version.xml"
    xpath: /version/version_no
    content: text
  register: version_xml
  changed_when: false

- name: Set version number
  set_fact:
    installed_version: "{{ version_xml.matches[0] | regex_replace('[^\\.\\d]+') }}"

- name: Delete the old Civi
  file:
    path: "{{ civiroot }}"
    state: absent
  become: yes
  become_user: "{{ run_as_user }}"
  when: cms != 'Drupal8' and civicrm == 'Yes' and installed_version != civi_ver.content


- name: Unarchive the files into civiroot (.tar.gz)
  unarchive:
    src: "/tmp/civicrm-{{ civi_ver.content }}-{{ cms|lower }}.tar.gz"
    dest: "{{ civiroot | dirname }}"
  become: yes
  become_user: "{{ run_as_user }}"
  when: (cms == 'Drupal' or cms == 'Backdrop') and installed_version != civi_ver.content

- name: Unarchive the files into civiroot (.zip)
  unarchive:
    src: "/tmp/civicrm-{{ civi_ver.content }}-{{ cms|lower }}.zip"
    dest: "{{ civiroot | dirname | dirname }}"
  become: yes
  become_user: "{{ run_as_user }}"
  when: cms == 'WordPress' and installed_version != civi_ver.content

- name: Update Civi via Composer
  composer:
    command: require
    arguments: "--with-all-dependencies civicrm/civicrm-core:'{{ civi_ver.content }}' civicrm/civicrm-packages:'{{ civi_ver.content }}' civicrm/civicrm-drupal-8:'{{ civi_ver.content }}'"
    working_dir: "{{ gitroot }}"
  when: cms == 'Drupal8' and civicrm == 'Yes' and installed_version != civi_ver.content
  become: yes
  become_user: "{{ run_as_user }}"

- name: Upgrade the Civi DB
  command: "cv -n upgrade:db --level=cms-full --cwd {{ webroot }}"
  become: yes
  become_user: "{{ run_as_user }}"

- name: git config - user/email
  blockinfile:
    path: "{{ gitroot }}/.git/config"
    block: |
      [user]
        email = none@megaphonetech.com
        name = {{ run_as_user }} on {{ inventory_hostname }}
  become: yes
  become_user: "{{ run_as_user }}"

- block:
  - name: Create CMS user later.
    patch:
      src: "{{role_path}}/files/cmsuser.diff"
      basedir: "{{ civiroot }}"
      strip: 1
    become: yes

  - name: Patch PR#27043. Scheduled Redminders fails when CiviContribute is disabled.
    patch:
      src: "{{role_path}}/files/27043.diff"
      basedir: "{{ civiroot }}"
      strip: 1
    become: yes

  - name: Patch PR#25823. Display FormBuilder validation errors.
    patch:
      src: "{{role_path}}/files/25823.diff"
      basedir: "{{ civiroot }}"
      strip: 1
    become: yes

  - name: Patch PR#25458. Calculate lifetime memberships better.
    patch:
      src: "{{role_path}}/files/25458.diff"
      basedir: "{{ civiroot }}"
      strip: 1
    become: yes

  - name: Civi multilingual logging patch
    patch:
      src: "{{role_path}}/files/civimultilinguallogging.diff"
      basedir: "{{ civiroot }}"
      strip: 1
    become: yes

  - name: PR#25390 - PayPal fix processor_id
    patch:
      src: "{{role_path}}/files/25390.diff"
      basedir: "{{ civiroot }}"
      strip: 1
    become: yes

  - name: Patch core#1006, PR#14390.  don't overwrite existing data on profile submission with a blank Select2.  Trivial to fix original PR?
    patch:
      src: "{{role_path}}/files/14390.diff"
      basedir: "{{ civiroot }}"
      strip: 1
    become: yes

  # - name: Alphabetize report listing (Reporting#25) (for Delta/WISCIENCE; Redmine#2562).
  #   patch:
  #     src: "{{role_path}}/files/16259.diff"
  #     basedir: "{{ civiroot }}"
  #     strip: 1
  #   become: yes

  - name: Allow token in title/alt text for contact image fields (Leonardo, Redmine#6168)
    patch:
      src: "{{role_path}}/files/651.diff"
      basedir: "{{ civiroot }}/drupal"
      strip: 1
    become: yes
    when: cms == "Drupal"
  when: cms != "Drupal8"

- name: git add Civi + patches
  command: git add -v -A
  args:
    chdir: "{{ civiroot }}"
  register: add_result
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: add_result.stdout != ''
  failed_when: add_result.stderr != ''

- name: git commit Civi + patches
  command: "git commit -m 'CiviCRM {{ civi_ver.content }} with my patches on top'"
  args:
    chdir: "{{ civiroot }}"
  register: commit_result
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: commit_result.rc == 0
  failed_when: not(commit_result.rc == 0 or 'nothing to commit, working tree clean' in commit_result.stdout_lines)

- name: git push
  command: "git push"
  args:
    chdir: "{{ webroot }}"
  register: push_result
  become: yes
  become_user: "{{ run_as_user }}"
  when: git_repo_push_url is not search("https://")
  changed_when: push_result.rc == 0 and push_result.stderr != 'Everything up-to-date'
  failed_when: not(push_result.rc == 0)

- name: Get a list of extensions that need updating
  script: helpers/upgradeable-civi.php
  args:
    chdir: "{{ webroot }}"
  register: extensions
  changed_when: false
  become: yes
  become_user: "{{ run_as_user }}"
  when: contract_type is search("Civi Maintenance") and civicrm == 'Yes'
  tags: upgrade-extensions

- name: Upgrade Civi extensions
  include_tasks:
    file: civi-extensions.yml
    apply:
      tags: upgrade-extensions
  with_items:
    - "{{ extensions.stdout }}"
  when: item is defined and item != "null" and item.key not in extension_redlist and civicrm == 'Yes'
  tags: upgrade-extensions

- name: Check for pending extension database updates
  command: "cv ev --level=cms-full 'return CRM_Extension_Upgrades::hasPending();' --cwd {{ webroot }}"
  become: yes
  become_user: "{{ run_as_user }}"
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/bin"
  changed_when: false
  tags: upgrade-extensions

- name: Get git changelog
  command: "git log --oneline {{ latest_commit.stdout }}..HEAD"
  args:
    chdir: "{{ webroot }}"
  register: changelog
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: FALSE
  when: latest_commit.stdout is defined and civicrm == 'Yes'
  tags: upgrade-extensions

- name: Print git changelog
  debug:
    var: changelog.stdout
  changed_when: FALSE
  when: latest_commit.stdout is defined and civicrm == 'Yes'
  tags: upgrade-extensions
