diff --git a/ext/search_kit/Civi/Api4/Action/SearchDisplay/AbstractRunAction.php b/ext/search_kit/Civi/Api4/Action/SearchDisplay/AbstractRunAction.php
index f214ee354983..84b733591b0c 100644
--- a/ext/search_kit/Civi/Api4/Action/SearchDisplay/AbstractRunAction.php
+++ b/ext/search_kit/Civi/Api4/Action/SearchDisplay/AbstractRunAction.php
@@ -308,17 +308,37 @@ private function rewrite(array $column, array $data): string {
     $output = $this->replaceTokens($column['rewrite'], $data, 'view');
     if ($hasSmarty) {
       $vars = [];
+      $nestedIds = [];
       // Convert dots to nested arrays which are more Smarty-friendly
       foreach ($data as $key => $value) {
         $parent = &$vars;
-        $keys = array_map('CRM_Utils_String::munge', explode('.', $key));
+        $allKeys = $keys = array_map('CRM_Utils_String::munge', explode('.', $key));
         while (count($keys) > 1) {
           $level = array_shift($keys);
           $parent[$level] = $parent[$level] ?? [];
+          // Fix collisions between e.g. contact_id & contact_id.display_name by nesting the id
+          if (is_scalar($parent[$level])) {
+            $nestedIds[] = implode('.', array_slice($allKeys, 0, count($keys)));
+            $parent[$level] = [
+              'id' => $parent[$level],
+            ];
+          }
           $parent = &$parent[$level];
         }
         $level = array_shift($keys);
-        $parent[$level] = $value;
+        // Fix collisions between e.g. contact_id & contact_id.display_name by nesting the id
+        if (isset($parent[$level]) && is_array($parent[$level])) {
+          $nestedIds[] = implode('.', $allKeys);
+          $parent[$level]['id'] = $value;
+        }
+        else {
+          $parent[$level] = $value;
+        }
+      }
+      // Fix references to e.g. contact_id as scalar if it was moved by above fixes, change reference to nested id
+      foreach (array_unique($nestedIds) as $nestedId) {
+        $quotedId = preg_quote('$' . $nestedId);
+        $output = preg_replace("/$quotedId(?![.\w])/", '$' . "$nestedId.id", $output);
       }
       $smarty = \CRM_Core_Smarty::singleton();
       $output = $smarty->fetchWith("string:$output", $vars);
diff --git a/ext/search_kit/tests/phpunit/api/v4/SearchDisplay/SearchRunTest.php b/ext/search_kit/tests/phpunit/api/v4/SearchDisplay/SearchRunTest.php
index 406f3bf606e6..bb72e6d07bf8 100644
--- a/ext/search_kit/tests/phpunit/api/v4/SearchDisplay/SearchRunTest.php
+++ b/ext/search_kit/tests/phpunit/api/v4/SearchDisplay/SearchRunTest.php
@@ -639,6 +639,49 @@ public function testRunWithSmartyRewrite() {
     }
     catch (\Exception $e) {
     }
+
+    // Start with email as base entity and use implicit join
+
+    $params = [
+      'checkPermissions' => FALSE,
+      'return' => 'page:1',
+      'savedSearch' => [
+        'api_entity' => 'Email',
+        'api_params' => [
+          'version' => 4,
+          'select' => ['id', 'email', 'contact_id', 'contact_id.first_name', 'contact_id.last_name', 'contact_id.nick_name'],
+          'where' => [['contact_id.last_name', '=', $lastName]],
+        ],
+      ],
+      'display' => [
+        'type' => 'table',
+        'label' => 'testDisplay',
+        'settings' => [
+          'limit' => 20,
+          'pager' => TRUE,
+          'columns' => [
+            [
+              'key' => 'contact_id',
+              'label' => 'Contact ID',
+              'type' => 'field',
+              'rewrite' => '#{$contact_id.id} is #{$contact_id}',
+            ],
+            [
+              'key' => 'first_name',
+              'label' => 'Name',
+              'type' => 'field',
+              'rewrite' => '{if $contact_id.nick_name}{$contact_id.nick_name}{else}[contact_id.first_name]{/if} {$contact_id.last_name}',
+            ],
+          ],
+          'sort' => [
+            ['id', 'ASC'],
+          ],
+        ],
+      ],
+    ];
+    $result = civicrm_api4('SearchDisplay', 'run', $params);
+    $this->assertEquals("#{$contacts[0]['id']} is #{$contacts[0]['id']}", $result[0]['columns'][0]['val']);
+    $this->assertEquals("Uno $lastName", $result[0]['columns'][1]['val']);
   }
 
   /**
