diff --git a/CRM/Event/Import/Form/MapField.php b/CRM/Event/Import/Form/MapField.php
index 630eb83652df..c8b03116b374 100644
--- a/CRM/Event/Import/Form/MapField.php
+++ b/CRM/Event/Import/Form/MapField.php
@@ -98,30 +98,20 @@ public function buildQuickForm() {
    * @param array $fields
    *   Posted values of the form.
    *
-   * @param $files
+   * @param array $files
    * @param self $self
    *
    * @return array|true
    *   list of errors to be posted back to the form
+   * @throws \CRM_Core_Exception
    */
   public static function formRule($fields, $files, $self) {
-    $requiredError = [];
-
-    if (!array_key_exists('savedMapping', $fields)) {
-      $importKeys = [];
-      $importKeys = [];
-      foreach ($fields['mapper'] as $field) {
-        $importKeys[] = [$field];
-      }
-      $parser = $self->getParser();
-      $rule = $parser->getDedupeRule($self->getContactType(), $self->getUserJob()['metadata']['entity_configuration']['Contact']['dedupe_rule'] ?? NULL);
-      $requiredError = $self->validateContactFields($rule, $importKeys, ['external_identifier', 'contact_id']);
-
-      if (!in_array('id', $fields['mapper']) && !in_array('event_id', $fields['mapper'])) {
+    $mappedFields = $self->getMappedFields($fields['mapper']);
+    if (!in_array('id', $mappedFields)) {
+      $requiredError = $self->validateRequiredContactFields($fields['mapper']);
+      if (!in_array('event_id', $mappedFields)) {
         // ID is the only field we need, if present.
-        $requiredError[] = ts('Missing required field: Provide %1 or %2',
-            [1 => 'Event ID', 2 => 'Event Title']
-          ) . '<br />';
+        $requiredError[] = ts('Missing required field: %1', [1 => 'Event']) . '<br />';
       }
     }
 
@@ -151,7 +141,6 @@ protected function getHighlightedFields(): array {
       $highlightedFieldsArray = [
         'id',
         'event_id',
-        'event_title',
         'status_id',
       ];
       foreach ($highlightedFieldsArray as $name) {
diff --git a/CRM/Event/Import/Parser/Participant.php b/CRM/Event/Import/Parser/Participant.php
index 802188fdab20..1c80917a73bb 100644
--- a/CRM/Event/Import/Parser/Participant.php
+++ b/CRM/Event/Import/Parser/Participant.php
@@ -47,11 +47,55 @@ public static function getUserJobInfo(): array {
   /**
    * The initializer code, called before the processing.
    */
-  public function init() {
+  public function init(): void {
     unset($this->userJob);
     $this->setFieldMetadata();
   }
 
+  /**
+   * Get a list of entities this import supports.
+   *
+   * @return array
+   */
+  public function getImportEntities() : array {
+    return [
+      'Participant' => [
+        'text' => ts('Participant Fields'),
+        'is_contact' => FALSE,
+        'required_fields_update' => $this->getRequiredFieldsForMatch(),
+        'required_fields_create' => $this->getRequiredFieldsForCreate(),
+        'is_base_entity' => TRUE,
+        'supports_multiple' => FALSE,
+        'is_required' => TRUE,
+        // For now we stick with the action selected on the DataSource page.
+        'actions' => $this->isUpdateExisting() ?
+          [['id' => 'update', 'text' => ts('Update existing'), 'description' => ts('Skip if no match found')]] :
+          [['id' => 'create', 'text' => ts('Create'), 'description' => ts('Skip if already exists')]],
+        'default_action' => $this->isUpdateExisting() ? 'update' : 'create',
+        'entity_name' => 'Participant',
+        'entity_title' => ts('Participant'),
+        'entity_field_prefix' => '',
+        'selected' => ['action' => $this->isUpdateExisting() ? 'update' : 'create'],
+      ],
+      'Contact' => [
+        'text' => ts('Contact Fields'),
+        'is_contact' => TRUE,
+        'entity_field_prefix' => 'contact.',
+        'unique_fields' => ['external_identifier', 'id'],
+        'supports_multiple' => FALSE,
+        'actions' => $this->isUpdateExisting() ? $this->getActions(['ignore', 'update']) : $this->getActions(['select', 'update', 'save']),
+        'selected' => [
+          'action' => $this->isUpdateExisting() ? 'ignore' : 'select',
+          'contact_type' => $this->getSubmittedValue('contactType'),
+          'dedupe_rule' => $this->getDedupeRule($this->getContactType())['name'],
+        ],
+        'default_action' => 'select',
+        'entity_name' => 'Contact',
+        'entity_title' => ts('Participant Contact'),
+      ],
+    ];
+  }
+
   /**
    * Handle the values in import mode.
    *
@@ -74,6 +118,7 @@ public function import(array $values): void {
       }
 
       $participantParams['contact_id'] = $this->getContactID($contactParams, $participantParams['contact_id'] ?? $contactParams['id'] ?? NULL, 'Contact', $this->getDedupeRulesForEntity('Contact'));
+      $participantParams['contact_id'] = $this->saveContact('Contact', $params['Contact'] ?? []) ?: $participantParams['contact_id'];
       // don't add to recent items, CRM-4399
       $participantParams['skipRecentView'] = TRUE;
 
diff --git a/CRM/Import/Form/MapField.php b/CRM/Import/Form/MapField.php
index b70c70299fb1..12ce28b79b13 100644
--- a/CRM/Import/Form/MapField.php
+++ b/CRM/Import/Form/MapField.php
@@ -586,4 +586,54 @@ protected function validateContactFields(array $rule, array $mapper, array $cont
     return $mapperError;
   }
 
+  /**
+   * @param $mapper
+   *
+   * @return array
+   */
+  protected function getImportKeys($mapper): array {
+    $importKeys = [];
+    foreach ($mapper as $field) {
+      if (is_array($field)) {
+        $importKeys[] = $field;
+      }
+      else {
+        $importKeys[] = [$field];
+      }
+    }
+    return $importKeys;
+  }
+
+  /**
+   * @param array $mapper
+   *
+   * @return array
+   */
+  protected static function getMappedFields(array $mapper): array {
+    $mappedFields = [];
+    foreach ($mapper as $field) {
+      if (is_array($field)) {
+        $mappedFields[] = $field[0];
+      }
+      else {
+        $mappedFields[] = $field;
+      }
+    }
+    return $mappedFields;
+  }
+
+  /**
+   * @param array $mapper
+   *
+   * @param string $entity
+   *
+   * @return array
+   * @throws \CRM_Core_Exception
+   */
+  protected function validateRequiredContactFields(array $mapper, string $entity = 'Contact'): array {
+    $parser = $this->getParser();
+    $rule = $parser->getDedupeRule($this->getContactType(), $this->getUserJob()['metadata']['entity_configuration'][$entity]['dedupe_rule'] ?? NULL);
+    return $this->validateContactFields($rule, $this->getImportKeys($mapper), ['external_identifier', 'contact_id']);
+  }
+
 }
diff --git a/CRM/Member/Import/Form/MapField.php b/CRM/Member/Import/Form/MapField.php
index 35ae1432c392..84f1bf465c4f 100644
--- a/CRM/Member/Import/Form/MapField.php
+++ b/CRM/Member/Import/Form/MapField.php
@@ -89,23 +89,10 @@ public function buildQuickForm(): void {
    *   list of errors to be posted back to the form
    */
   public static function formRule($fields, $files, $self) {
-    $importKeys = [];
-    $mappedFields = [];
-    foreach ($fields['mapper'] as $field) {
-      if (is_array($field)) {
-        $importKeys[] = $field;
-        $mappedFields[] = $field[0];
-      }
-      else {
-        $importKeys[] = [$field];
-        $mappedFields[] = $field;
-      }
-    }
-    $parser = $self->getParser();
-    $rule = $parser->getDedupeRule($self->getContactType(), $self->getUserJob()['metadata']['entity_configuration']['Contact']['dedupe_rule'] ?? NULL);
-    $errors = $self->validateContactFields($rule, $importKeys, ['external_identifier', 'contact_id', 'contact_id']);
-
+    $errors = [];
+    $mappedFields = $self->getMappedFields($fields['mapper']);
     if (!in_array('id', $mappedFields)) {
+      $errors = $self->validateRequiredContactFields($fields['mapper']);
       // FIXME: should use the schema titles, not redeclare them
       $requiredFields = [
         'membership_type_id' => ts('Membership Type'),
diff --git a/ext/civiimport/civiimport.php b/ext/civiimport/civiimport.php
index 4bf4f810fec4..7baebc0b5d20 100644
--- a/ext/civiimport/civiimport.php
+++ b/ext/civiimport/civiimport.php
@@ -251,5 +251,5 @@ function civiimport_civicrm_buildForm(string $formName, $form) {
 }
 
 function civiimport_enabled_forms() {
-  return ['CRM_Contribute_Import_Form_MapField', 'CRM_Member_Import_Form_MapField'];
+  return ['CRM_Contribute_Import_Form_MapField', 'CRM_Member_Import_Form_MapField', 'CRM_Event_Import_Form_MapField'];
 }
