diff --git a/CRM/Core/Payment/PayPalProIPN.php b/CRM/Core/Payment/PayPalProIPN.php
index 46c0949f85..eeee7c456f 100644
--- a/CRM/Core/Payment/PayPalProIPN.php
+++ b/CRM/Core/Payment/PayPalProIPN.php
@@ -257,6 +257,16 @@ class CRM_Core_Payment_PayPalProIPN extends CRM_Core_Payment_BaseIPN {
           $recur->contribution_status_id = $contributionStatuses['In Progress'];
         }
         break;
+
+      case 'recurring_payment_failed':
+        if ($first) {
+          $recur->start_date = $now;
+        }
+        else {
+          $recur->modified_date = $now;
+        }
+        $recur->contribution_status_id = $contributionStatuses['Failed'];
+        break;
     }
 
     $recur->save();
@@ -277,7 +287,7 @@ class CRM_Core_Payment_PayPalProIPN extends CRM_Core_Payment_BaseIPN {
       );
     }
 
-    if ($txnType != 'recurring_payment') {
+    if ($txnType != 'recurring_payment' && $txnType != 'recurring_payment_failed') {
       return;
     }
 
@@ -501,6 +511,13 @@ INNER JOIN civicrm_membership_payment mp ON m.id = mp.membership_id AND mp.contr
     $input['paymentStatus'] = self::retrieve('payment_status', 'String', 'POST', FALSE);
 
     $input['amount'] = self::retrieve('mc_gross', 'Money', 'POST', FALSE);
+    if ($input['txnType'] == 'recurring_payment_failed') {
+      $input['paymentStatus'] = 'Failed';
+    }
+    //failed payments have "amount" but not "mc_gross".
+    if (!($input['amount'])) {
+      $input['amount'] = self::retrieve('amount', 'Money', 'POST', FALSE);
+    }
     $input['reasonCode'] = self::retrieve('ReasonCode', 'String', 'POST', FALSE);
 
     $billingID = $ids['billing'];
@@ -558,8 +575,8 @@ INNER JOIN civicrm_membership_payment mp ON m.id = mp.membership_id AND mp.contr
       'invoice_id' => $input['invoice'],
     ]);
 
-    if ($input['txnType'] !== 'recurring_payment' && $input['txnType'] !== 'recurring_payment_profile_created') {
-      throw new CRM_Core_Exception('Paypal IPNS not handled other than recurring_payments');
+    if ($input['txnType'] !== 'recurring_payment' && $input['txnType'] !== 'recurring_payment_profile_created' && ($input['txnType'] !== 'recurring_payment_failed') {
+      throw new CRM_Core_Exception('Paypal IPNS not handled other than recurring_payments and failed payments');
     }
 
     $this->getInput($input, $ids);
